-- Configuration generated for Ox 0.7.7 by the configuration assistant --
event_mapping = {
    -- Cursor movement
    ["up"] = function() 
        editor:move_up() 
    end,
    ["down"] = function() 
        editor:move_down() 
    end,
    ["left"] = function() 
        editor:move_left() 
    end,
    ["right"] = function() 
        editor:move_right() 
    end,
    ["ctrl_up"] = function() 
        editor:add_cursor_above() 
    end,
    ["ctrl_down"] = function() 
        editor:add_cursor_below() 
    end,
    ["ctrl_shift_down"] = function() 
        editor:delete_cursor_above() 
    end,
    ["ctrl_shift_up"] = function() 
        editor:delete_cursor_below() 
    end,
    ["ctrl_left"] = function() 
        editor:move_previous_word() 
    end,
    ["ctrl_right"] = function() 
        editor:move_next_word() 
    end,
    ["home"] = function() 
        editor:move_home() 
    end,
    ["end"] = function() 
        editor:move_end() 
    end,
    ["pageup"] = function() 
        editor:move_page_up() 
    end,
    ["pagedown"] = function() 
        editor:move_page_down() 
    end,
    ["alt_v"] = function()
        editor:cursor_to_viewport()
    end,
    ["alt_g"] = function()
        local line = editor:prompt("Go to line")
        editor:move_to(0, tonumber(line))
    end,
    -- Selection
    ["shift_up"] = function()
        editor:select_up()
    end,
    ["shift_down"] = function()
        editor:select_down()
    end,
    ["shift_left"] = function()
        editor:select_left()
    end,
    ["shift_right"] = function()
        editor:select_right()
    end,
    ["esc"] = function()
        editor:cancel_selection()
    end,
    ["shift_home"] = function()
        local n_moves = editor.cursor.x
        for i = 1, n_moves do
            editor:select_left()
        end
    end,
    ["shift_end"] = function()
        local n_moves = #editor:get_line() - editor.cursor.x
        for i = 1, n_moves do
            editor:select_right()
        end
    end,
    ["ctrl_shift_left"] = function()
        local no_select = editor.cursor.x == editor.selection.x and editor.cursor.y == editor.selection.y
        if no_select then
            local cache = editor.cursor
            editor:move_previous_word()
            local after = editor.cursor
            editor:move_to(cache.x, cache.y)
            editor:select_to(after.x, after.y)
        else
            local start = editor.selection
            editor:move_previous_word()
            local cache = editor.cursor
            editor:move_to(start.x, start.y)
            editor:select_to(cache.x, cache.y)
        end
    end,
    ["ctrl_shift_right"] = function()
        local no_select = editor.cursor.x == editor.selection.x and editor.cursor.y == editor.selection.y
        if no_select then
            local cache = editor.cursor
            editor:move_next_word()
            local after = editor.cursor
            editor:move_to(cache.x, cache.y)
            editor:select_to(after.x, after.y)
        else
            local start = editor.selection
            editor:move_next_word()
            local cache = editor.cursor
            editor:move_to(start.x, start.y)
            editor:select_to(cache.x, cache.y)
        end
    end,
    ["shift_pageup"] = function()
        local no_select = editor.cursor.x == editor.selection.x and editor.cursor.y == editor.selection.y
        if no_select then
            local cache = editor.cursor
            editor:move_page_up()
            local after = editor.cursor
            editor:move_to(cache.x, cache.y)
            editor:select_to(after.x, after.y)
        else
            local start = editor.selection
            editor:move_page_up()
            local cache = editor.cursor
            editor:move_to(start.x, start.y)
            editor:select_to(cache.x, cache.y)
        end
    end,
    ["shift_pagedown"] = function()
        local no_select = editor.cursor.x == editor.selection.x and editor.cursor.y == editor.selection.y
        if no_select then
            local cache = editor.cursor
            editor:move_page_down()
            local after = editor.cursor
            editor:move_to(cache.x, cache.y)
            editor:select_to(after.x, after.y)
        else
            local start = editor.selection
            editor:move_page_down()
            local cache = editor.cursor
            editor:move_to(start.x, start.y)
            editor:select_to(cache.x, cache.y)
        end
    end,
    -- Searching & Replacing
    ["alt_f"] = function()
        editor:search()
    end,
    ["alt_r"] = function()
        editor:replace()
    end,
    -- Document Management
    ["alt_n"] = function()
        editor:new()
    end,
    ["alt_o"] = function()
        editor:open()
    end,
    ["alt_s"] = function()
        editor:save()
    end,
    ["alt_q"] = function()
        editor:quit()
    end,
    ["alt_left"] = function()
        editor:previous_tab()
    end,
    ["alt_right"] = function()
        editor:next_tab()
    end,
    -- Clipboard Interaction
    ["alt_a"] = function()
        editor:select_all()
    end,
    ["alt_x"] = function()
        editor:cut()
    end,
    ["ctrl_insert"] = function()
        editor:copy()
    end,
    ["shift_insert"] = function()
        editor:paste()
    end,
    -- Undo & Redo
    ["alt_z"] = function()
        editor:undo()
    end,
    ["alt_y"] = function()
        editor:redo()
    end,
    -- Miscellaneous
    ["alt_h"] = function()
        help_message.enabled = not help_message.enabled
    end,
    ["alt_d"] = function()
        local cursor = editor.cursor
        local select = editor.selection
        local no_select = select.x == cursor.x and select.y == cursor.y
        if no_select then
            editor:remove_line()
        else
            -- delete a group of lines
            if cursor.y > select.y then
                editor:move_to(cursor.x, select.y)
                for line = select.y, cursor.y do
                    editor:remove_line()
                end
            else
                editor:move_to(cursor.x, cursor.y)
                for line = cursor.y, select.y do
                    editor:remove_line()
                end
            end
        end
    end,
    ["alt_k"] = function()
        editor:open_command_line()
    end,
    ["alt_up"] = function()
        local cursor = editor.cursor
        local select = editor.selection
        local single = select.x == cursor.x and select.y == cursor.y
        editor:commit()
        if single then
            -- move single line
            editor:move_line_up()
            autoindent:fix_indent()
        else
            -- move an entire selection
            if cursor.y > select.y then
                for line = select.y, cursor.y do
                    editor:move_to(cursor.x, line)
                    editor:move_line_up()
                end
            else
                for line = cursor.y, select.y do
                    editor:move_to(cursor.x, line)
                    editor:move_line_up()
                end
            end
            editor:move_to(cursor.x, cursor.y - 1)
            editor:select_to(select.x, select.y - 1)
        end
    end,
    ["alt_down"] = function()
        local cursor = editor.cursor
        local select = editor.selection
        local single = select.x == cursor.x and select.y == cursor.y
        editor:commit()
        if single then
            -- move single line
            editor:move_line_down()
            autoindent:fix_indent()
        else
            -- move an entire selection
            if cursor.y > select.y then
                for line = cursor.y, select.y, -1 do
                    editor:move_to(cursor.x, line)
                    editor:move_line_down()
                end
            else
                for line = select.y, cursor.y, -1 do
                    editor:move_to(cursor.x, line)
                    editor:move_line_down()
                end
            end
            editor:move_to(cursor.x, cursor.y + 1)
            editor:select_to(select.x, select.y + 1)
        end
    end,
    ["ctrl_backspace"] = function()
        editor:remove_word()
    end,
    ["alt_f5"] = function()
        editor:run_file()
    end,
    -- File Tree
    ["alt_t"] = function()
        editor:toggle_file_tree()
    end,
    ["ctrl_space"] = function()
        editor:toggle_file_tree()
    end,
}


-- Document Configuration --
document.indentation = 'spaces'
document.tab_width = 4
document.undo_period = 10
document.wrap_cursor = true

-- Load Plug-Ins --
load_plugin("autoindent.lua")
load_plugin("pairs.lua")
load_plugin("quickcomment.lua")
load_plugin("git.lua")
